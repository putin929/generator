#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
–ü—Ä–æ—Å—Ç–æ–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
"""

import json
import datetime
from enum import Enum
import os

class Priority(Enum):
    LOW = 1
    MEDIUM = 2
    HIGH = 3
    URGENT = 4

class Status(Enum):
    TODO = "todo"
    IN_PROGRESS = "in_progress"
    DONE = "done"

class TaskManager:
    def __init__(self, data_file="tasks.json"):
        self.data_file = data_file
        self.tasks = []
        self.next_id = 1
        self.load_data()
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.data_file):
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.tasks = data.get('tasks', [])
                    self.next_id = data.get('next_id', 1)
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫
                    for task in self.tasks:
                        if task.get('created_date'):
                            task['created_date'] = datetime.datetime.strptime(
                                task['created_date'], '%Y-%m-%d %H:%M:%S'
                            )
                        if task.get('due_date'):
                            task['due_date'] = datetime.datetime.strptime(
                                task['due_date'], '%Y-%m-%d'
                            ).date()
                        if task.get('completed_date'):
                            task['completed_date'] = datetime.datetime.strptime(
                                task['completed_date'], '%Y-%m-%d %H:%M:%S'
                            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.tasks = []
            self.next_id = 1
    
    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏ –≤ —Ñ–∞–π–ª"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON
            tasks_to_save = []
            for task in self.tasks:
                task_copy = task.copy()
                if task.get('created_date'):
                    task_copy['created_date'] = task['created_date'].strftime('%Y-%m-%d %H:%M:%S')
                if task.get('due_date'):
                    task_copy['due_date'] = task['due_date'].strftime('%Y-%m-%d')
                if task.get('completed_date'):
                    task_copy['completed_date'] = task['completed_date'].strftime('%Y-%m-%d %H:%M:%S')
                tasks_to_save.append(task_copy)
            
            data = {
                'tasks': tasks_to_save,
                'next_id': self.next_id
            }
            
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def add_task(self, title, description="", priority=Priority.MEDIUM, due_date=None):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        
        Args:
            title (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            description (str): –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            priority (Priority): –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏
            due_date (date): –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        task = {
            'id': self.next_id,
            'title': title,
            'description': description,
            'priority': priority.value,
            'status': Status.TODO.value,
            'created_date': datetime.datetime.now(),
            'due_date': due_date,
            'completed_date': None
        }
        
        self.tasks.append(task)
        self.next_id += 1
        self.save_data()
        
        priority_name = priority.name.lower()
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: '{title}' (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_name})")
    
    def get_task_by_id(self, task_id):
        """–ù–∞—Ö–æ–¥–∏—Ç –∑–∞–¥–∞—á—É –ø–æ ID"""
        for task in self.tasks:
            if task['id'] == task_id:
                return task
        return None
    
    def update_task_status(self, task_id, new_status):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏"""
        task = self.get_task_by_id(task_id)
        if not task:
            print(f"‚ùå –ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        old_status = task['status']
        task['status'] = new_status.value
        
        if new_status == Status.DONE and old_status != Status.DONE.value:
            task['completed_date'] = datetime.datetime.now()
        elif new_status != Status.DONE:
            task['completed_date'] = None
        
        self.save_data()
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ '{task['title']}' –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_status.value}")
    
    def delete_task(self, task_id):
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É"""
        task = self.get_task_by_id(task_id)
        if not task:
            print(f"‚ùå –ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        self.tasks = [t for t in self.tasks if t['id'] != task_id]
        self.save_data()
        print(f"üóëÔ∏è –ó–∞–¥–∞—á–∞ '{task['title']}' —É–¥–∞–ª–µ–Ω–∞")
    
    def get_tasks(self, status=None, sort_by='priority'):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        
        Args:
            status (Status): –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
            sort_by (str): –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ ('priority', 'due_date', 'created_date')
        """
        filtered_tasks = self.tasks.copy()
        
        if status:
            filtered_tasks = [t for t in filtered_tasks if t['status'] == status.value]
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        if sort_by == 'priority':
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (—É–±—ã–≤–∞–Ω–∏–µ) –∏ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
            filtered_tasks.sort(key=lambda x: (-x['priority'], x['created_date']))
        elif sort_by == 'due_date':
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ä–æ–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–∑–∞–¥–∞—á–∏ –±–µ–∑ —Å—Ä–æ–∫–∞ –≤ –∫–æ–Ω—Ü–µ)
            filtered_tasks.sort(key=lambda x: (
                x['due_date'] is None,
                x['due_date'] if x['due_date'] else datetime.date.max
            ))
        elif sort_by == 'created_date':
            filtered_tasks.sort(key=lambda x: x['created_date'], reverse=True)
        
        return filtered_tasks
    
    def display_tasks(self, status=None, show_completed=False):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–¥–∞—á–∏ –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        if status:
            tasks = self.get_tasks(status=status)
            print(f"\nüìã –ó–∞–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status.value.replace('_', ' ')}':")
        elif show_completed:
            tasks = self.get_tasks()
            print("\nüìã –í—Å–µ –∑–∞–¥–∞—á–∏:")
        else:
            tasks = [t for t in self.get_tasks() if t['status'] != Status.DONE.value]
            print("\nüìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
        
        if not tasks:
            print("–ó–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        print("-" * 100)
        
        for task in tasks:
            # –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
            status_icons = {
                'todo': '‚è≥',
                'in_progress': 'üîÑ',
                'done': '‚úÖ'
            }
            
            # –ò–∫–æ–Ω–∫–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            priority_icons = {
                1: 'üü¢',  # LOW
                2: 'üü°',  # MEDIUM
                3: 'üü†',  # HIGH
                4: 'üî¥'   # URGENT
            }
            
            status_icon = status_icons.get(task['status'], '‚ùì')
            priority_icon = priority_icons.get(task['priority'], '‚ö™')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ—Å—Ç–∏
            overdue = ""
            if task['due_date'] and task['status'] != Status.DONE.value:
                if task['due_date'] < datetime.date.today():
                    overdue = " ‚ö†Ô∏è –ü–†–û–°–†–û–ß–ï–ù–û"
                elif task['due_date'] == datetime.date.today():
                    overdue = " üéØ –°–ï–ì–û–î–ù–Ø"
            
            print(f"{status_icon} {priority_icon} [{task['id']}] {task['title']}{overdue}")
            
            if task['description']:
                print(f"    üìù {task['description']}")
            
            if task['due_date']:
                print(f"    üìÖ –°—Ä–æ–∫: {task['due_date']}")
            
            if task['completed_date']:
                print(f"    ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {task['completed_date'].strftime('%Y-%m-%d %H:%M')}")
            
            print()
    
    def get_statistics(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–¥–∞—á–∞–º"""
        total = len(self.tasks)
        todo = len([t for t in self.tasks if t['status'] == Status.TODO.value])
        in_progress = len([t for t in self.tasks if t['status'] == Status.IN_PROGRESS.value])
        done = len([t for t in self.tasks if t['status'] == Status.DONE.value])
        
        # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        overdue = len([
            t for t in self.tasks 
            if t['due_date'] and t['due_date'] < datetime.date.today() 
            and t['status'] != Status.DONE.value
        ])
        
        # –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        today_tasks = len([
            t for t in self.tasks 
            if t['due_date'] and t['due_date'] == datetime.date.today()
            and t['status'] != Status.DONE.value
        ])
        
        return {
            'total': total,
            'todo': todo,
            'in_progress': in_progress,
            'done': done,
            'overdue': overdue,
            'today': today_tasks
        }

def main():
    task_manager = TaskManager()
    
    print("=== –ú–ï–ù–ï–î–ñ–ï–† –ó–ê–î–ê–ß ===\n")
    
    while True:
        print("1. –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
        print("2. –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏")
        print("3. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏")
        print("4. –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏")
        print("5. –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
        print("6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        print("7. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-7): ")
        
        if choice == "1":
            title = input("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ").strip()
            if not title:
                print("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                continue
            
            description = input("–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ").strip()
            
            print("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:")
            print("1. –ù–∏–∑–∫–∏–π")
            print("2. –°—Ä–µ–¥–Ω–∏–π")
            print("3. –í—ã—Å–æ–∫–∏–π") 
            print("4. –°—Ä–æ—á–Ω—ã–π")
            
            try:
                priority_choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1-4, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2): ") or "2")
                priority = Priority(priority_choice)
            except (ValueError, KeyError):
                priority = Priority.MEDIUM
                print("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
            
            # –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            due_date_str = input("–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (YYYY-MM-DD) –∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞: ").strip()
            due_date = None
            if due_date_str:
                try:
                    due_date = datetime.datetime.strptime(due_date_str, '%Y-%m-%d').date()
                except ValueError:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, —Å—Ä–æ–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            task_manager.add_task(title, description, priority, due_date)
            
        elif choice == "2":
            task_manager.display_tasks()
            
        elif choice == "3":
            task_manager.display_tasks(show_completed=True)
            
        elif choice == "4":
            try:
                task_id = int(input("ID –∑–∞–¥–∞—á–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: "))
                
                print("–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:")
                print("1. –ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é")
                print("2. –í –ø—Ä–æ—Ü–µ—Å—Å–µ")
                print("3. –í—ã–ø–æ–ª–Ω–µ–Ω–æ")
                
                status_choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å (1-3): "))
                status_map = {1: Status.TODO, 2: Status.IN_PROGRESS, 3: Status.DONE}
                
                if status_choice in status_map:
                    task_manager.update_task_status(task_id, status_map[status_choice])
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Å—Ç–∞—Ç—É—Å–∞")
                    
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏")
                
        elif choice == "5":
            try:
                task_id = int(input("ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: "))
                confirm = input(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É {task_id}? (y/N): ")
                if confirm.lower() == 'y':
                    task_manager.delete_task(task_id)
                else:
                    print("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏")
                
        elif choice == "6":
            stats = task_manager.get_statistics()
            print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–î–ê–ß")
            print("=" * 30)
            print(f"üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {stats['total']}")
            print(f"‚è≥ –ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é: {stats['todo']}")
            print(f"üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {stats['in_progress']}")
            print(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['done']}")
            
            if stats['overdue'] > 0:
                print(f"‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {stats['overdue']}")
            
            if stats['today'] > 0:
                print(f"üéØ –ù–∞ —Å–µ–≥–æ–¥–Ω—è: {stats['today']}")
            
            if stats['total'] > 0:
                completion_rate = (stats['done'] / stats['total']) * 100
                print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {completion_rate:.1f}%")
                
        elif choice == "7":
            print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üìã")
            break
            
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        
        print("\n" + "="*50 + "\n")

if __name__ == "__main__":
    main()
